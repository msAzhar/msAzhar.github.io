---
layout: post
title: Ruby on Rails 
date: 2016-07-13 21:33:00
---

<blockquote>
Ruby on Rails'e Giriş...<br>
<a href="">#Rails Kurulumu</a>
</blockquote>


Uzem Akademi Yaz Kampı'nın eğitimleri başladı sonunda:) Bugün üçüncü günümüzdü. Ve Bu ilk üç günümüzün konusu Ruby on Rails idi...

Ruby on Rails, Ruby dilini temel alan bir web geliştirme framework'üdür. Ruby on Rails, kısaca Rails, iki temel yazılım geliştirme felsefesi üzerine kuruludur:


   <li> <b><b>Konfigurasyon Üzerine Kabuller (CoC: Convention over Configuration):</b><br> 
Bu kabuller sayesinde uygulamamızı geliştirmeye 1:0 önde başlamış oluruz, yani biz doğrudan işe başlayabiliriz. Bu felsefe sayesinde, Rails ile uygulama geliştirmek diğer hiç bir alternatifinin ulaşamadığı kadar hızlı ve eğlencelidir.
   <li> <b><b>Kendi kendini tekrarlamamak (DRY: Dont't Repeat Yourself):</b></b><br>  
Bu felsefedeki amaç ise, aynı işlevselliğe sahip kodun uygulamanın farklı yerlerinde tekrar tekrar yazılmasını engellemektir. Ruby'nin etkileyici metaprogramming(kısaca kod yazan kodlar) özellikleri sayesinde Rails, DRY felsefesini en üst düzeyde gerçekleştirmektedir. <br> 
Bir de MVC var...<br>
<br>
<h4>MVC (Model - View - Controller)</h4>
<br>
MVC (Model View Controller), çevik (agile) yazılım geliştirme süreçlerine uygun olarak sıklıkla tercih edilen bir yazılım mimarisi desenidir
(software architectural patter). MVC'deki ana düşünce, kullanıcı arayüzü ile arka plandaki işlemlerin birbirinden ayrı tutmak. Bu amaçla, sistemi üç ana rol başlık çatında geliştirmektedir..<br>
<li> <font color="black">Model:</font> Uygulamamızın kullandığı verilerin yaşadığı yerdir. Özel veriler ve bu verilerin arasındaki ilişkilerin, erişim ve düzenleme kurallarının bulunduğu bölümdür. Model, verilerin kullanıcıya ne şekilde sunulacağı ile ilgilenmez.
<li> <font color="black">View:</font> Uygulamamızın arayüz elemanlarını içeren bölümdür. Verilerin nereden geldiğiyle ilgili bir bilgisi yok.
<li> <font color="black">Controller:</font> Kullanıcı isteklerini gerçekleştirmek için gereken görevleri yerine getiren bölümdür. Ve bölümler arasındaki ilişki, Conr-troller ile gerçekleştirilmektedir. Veritabanına erişmekle yükümlü olan bölüm modeldir. Kullanıcı istekleri ise Controller'a iletilir. 
{% highlight  %}

$ rails new <uygulamaismi>

{% endhighlight %}

{% highlight html %}

<!DOCTYPE html>
<html ng-app> <!-- tüm sayfanın AngularJS uygulaması olduğunu belirtmektedir -->
  <head>
    <title>Başlık</title>
  </head>
  <body>
    <p>Bu bir AngularJS uygulamasıdır..!</p>
  </body>
</html>

{% endhighlight %}

AngularJS'in kütüphanesiyle berbarer gelen *directive*'ler mevcuttur. Onlar `ng-prefix` *(ön eki)* kullanır. Örneğin, ng-model, ng-app vs.
*Directive*'leri bulduktan sonra onları yugulamamıza *bind* etmemiz gerekmektedir. Uygulama *boot* ediliyor ve gösteriliyor. Ve **Digest cycle** kullanıcı etkileşimi dinlemeye başlıyor.

Digest Cycle uygulamamızın *view* katmanını yani kullanıcının gördüğü ekrandaki verileri güncel tutmakla görevli yapıdır. *View*'nun otomatik güncellenmesini herhangi bir ekstra listener eklemeden sağlamaktadır.
AngularJS, *template* olarak *HTML* kullanır, kendi dili ile ekstra etiketler ekleyerek *HTML* olarak *extend* eder.

AngularJS'in bir diğer dikkat çeken özelliklerinden biri <b><b>Two way binding</b>'dir. Kısaca, *model* kısmındaki *data*'nın değişmesinin *view* kısmında, *view* kısmındaki *data* değişiminin *model* kısmında senkron bir şekilde değişimini sağlamaktadır. Böylece, hem *view* hem *model* iki taraflı olarak birbiri ile senkron olarak güncel kalıyor.

AngularJS'in basit *HTML* etiketleri kullanmasının avantajı HTML kodlayanın, AngularJS tarafı ile ilgilenmeden gelen *data*'ları kolayca bağlayabiliyor olmasıdır. Böyle bir yapıya ulaşmasını sağlayan parçalara göz atalım.
 <ul>
   <li> <b><b>Model:</b> Kullanıcıya gösterilecek *data*'yı gösteren kısımdır.</li>
   <li> <b>View:</b> Kullanıcının gördüğü kısımdır. Temel *HTML* etiketleri ile birlikte AngularJS *directive*'lerinin model katmanı ile bağlanması ile oluşan yapıdır. AngularJS'in *template* yapısını bu katmana katıyoruz.</li>
   <li> <b>Controller:</b> Bu katman, modelden aldığı *data*'lar ile birlikte uygulamayı kontrol eden bir logic oluşturur. Modelden alınan *data*'ların *view*'e bağlanmasını yönetir.</li>
   <li> <b>Scope:</b> *Data* modellerini ve fonksiyonlarını içeren kısımdır. Genel olarak *controller* kısmında scope nesneleri ve fonksiyonlerı set edilir.</li>
   <li> <b>Directives:</b> *HTML*'e yeni özellikler kazandırma görevini halleden kısımdır.</li>
   <li> <b>Expressins:</b> {{ }} ile ifade edilirler. *Scope*'tan gelen *data* ve fonksiyonların bağlanması ile oluşturulur.</li>
   <li> <b>Template</b> Temel *HTML* etiketleri, *directive*'leri ve *expressin*'ları içeren kısımdır.</li><br>




